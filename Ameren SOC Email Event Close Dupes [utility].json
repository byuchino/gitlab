{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Utility",
    "coa": {
        "data": {
            "description": "This playbook will be invoked at the end of our email main event.  It will look for events/cases that already exist based on a duplicate threatId from proofpoint, merge the duplicate event into the original event and close the new event as a duplicate",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_3",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_4",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                },
                {
                    "id": "port_4_to_port_5",
                    "sourceNode": "4",
                    "sourcePort": "4_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_5_to_port_6",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_6_to_port_7",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_7_to_port_8",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_5_to_port_8",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "id": "port_8_to_port_1",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "608b1a6ee23ce57e99276639edb53a29cce4e9bb",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 419.9999999999999
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 1480
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "Initialize",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "initialize",
                        "id": "2",
                        "inputParameters": [],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.save_run_data(value=\"False\", key='duplicate_event', auto=True)\n    \n\n",
                    "x": 980,
                    "y": 544.5
                },
                "3": {
                    "data": {
                        "action": "get data",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Get email events or cases",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "HTTP",
                        "connectorConfigs": [
                            "local rest"
                        ],
                        "connectorId": "290b7499-0374-4930-9cdc-5e9b05d65827",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_email_events_or_cases",
                        "id": "3",
                        "parameters": {
                            "location": "/rest/container?_filter_label__in=[\"email_event_automation\"]&_filter_statu__name__in=[\"new\",\"open\",\"in+progress\"]",
                            "verify_certificate": false
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "location"
                            },
                            {
                                "data_type": "boolean",
                                "field": "verify_certificate"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "action",
                    "x": 980,
                    "y": 664.5
                },
                "4": {
                    "data": {
                        "advanced": {
                            "customName": "locate duplicate event",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "locate_duplicate_event",
                        "id": "4",
                        "inputParameters": [
                            "container:id",
                            "get_email_events_or_cases:action_result.data.*.parsed_response_body.data",
                            "artifact:*.cef.threatID",
                            "container:label"
                        ],
                        "outputVariables": [
                            "duplicate_event_id"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    base_url = phantom.build_phantom_rest_url('artifact')\n    \n    \n    events = get_email_events_or_cases_result_item_0[0] if get_email_events_or_cases_result_item_0 and len(get_email_events_or_cases_result_item_0) > 0 else []\n    threatIds = list(item for item in container_artifact_cef_item_0 if item)\n    threatId = threatIds[0] if len(threatIds) == 1 else None\n    is_tap_click_alert = label_value == \"tap_click_event_automation\"\n    \n    phantom.debug(f'eval case threat ids: {threatId}')\n    duplicate_event_id = None\n    my_event_id = id_value\n    \n    if threatId and events:\n        \n        for event in events:\n            # We do not want to match on our own event.\n            if event and event.get('id') and event.get('id') != my_event_id:\n                event_id = event.get('id')\n                \n                artifact_url = f'{base_url}?_filter_container_id={event_id}'\n                #phantom.debug(f'sending req: {artifact_url}')\n                \n                response = phantom.requests.get(artifact_url, verify=False)\n                \n                if response.status_code == 200:\n                    for artifact in response.json()['data']:\n                        if artifact and artifact.get('cef'):\n                            cef = artifact.get('cef')\n                            #phantom.debug(f'eval match: {cef.get(\"threatID\")} {threatId}')\n                            if cef.get('threatID') and cef.get('threatID') == threatId:\n                                #phantom.debug(f'Hit on duplicate artifact: {json.dumps(artifact, indent=4)} event_id: {event_id}')\n                                duplicate_event_id = event_id\n                                break\n                                \n                else:\n                    phantom.error(f'HTTP Req failure getting artifacts for event_id: {event_id} Resp code: {response.status_code}')\n                    \n                    \n    locate_duplicate_event__duplicate_event_id = duplicate_event_id\n    \n    if locate_duplicate_event__duplicate_event_id:\n        # Save our duplicate_event state so we can return that this was indeed a duplicate\n        phantom.save_run_data(value=\"True\", key='duplicate_event', autom=True)\n        phantom.debug(f'Found Dup Event: {locate_duplicate_event__duplicate_event_id}')\n        \n\n",
                    "x": 980,
                    "y": 804.5
                },
                "5": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "locate_duplicate_event:custom_function:duplicate_event_id",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "5",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "decision",
                    "x": 1060,
                    "y": 924.5
                },
                "6": {
                    "data": {
                        "advanced": {
                            "customName": "Merge into duplicate",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "ameren_container_merge",
                            "repoName": "phantom_pb_templates"
                        },
                        "functionId": 1,
                        "functionName": "merge_into_duplicate",
                        "id": "6",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "ameren_container_merge": {
                                "description": "An alternative to the add-to-case API call.  This function will copy all artifacts, automation, notes and commands over from every container within the container_list into the target_container.  The target_container will be upgraded to a case.  The notes will be copied over with references to the child containers from where they came.  A note will be left in the child containers with a link to the target container.  The child containers will be marked as evidence within the target container.  Any notes left as a consequence of the merge process will be skipped in subsequent merges.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "The target container to copy the information over.  Supports container dictionary or container id",
                                        "inputType": "item",
                                        "label": "target_container",
                                        "name": "target_container",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "A list of container IDs to copy into the target container.",
                                        "inputType": "item",
                                        "label": "container_list",
                                        "name": "container_list",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Name or ID of the workbook to add if the container does not have a workbook yet.  If no workbook is provided, the system default workbook will be added.",
                                        "inputType": "item",
                                        "label": "workbook",
                                        "name": "workbook",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "True or False to close the child containers in the container_list after merge.  Defaults to False.",
                                        "inputType": "item",
                                        "label": "close_containers",
                                        "name": "close_containers",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "ameren_container_merge",
                                "name": "ameren_container_merge"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "ameren_container_merge": {
                                "close_containers": "False",
                                "container_list": "container:id",
                                "target_container": "locate_duplicate_event:custom_function:duplicate_event_id",
                                "workbook": "Scratch Workbook"
                            }
                        }
                    },
                    "errors": {},
                    "id": "6",
                    "type": "utility",
                    "x": 980,
                    "y": 1084.5
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "Close Case",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "close_case",
                        "id": "7",
                        "inputParameters": [
                            "container:id",
                            "merge_into_duplicate:custom_function_result.success",
                            "locate_duplicate_event:custom_function:duplicate_event_id"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    success = merge_into_duplicate_success[0] if merge_into_duplicate_success else False\n    target_event_id = locate_duplicate_event__duplicate_event_id\n    event_id = id_value\n    merged_event = container # Need to get our event.\n    \n    \n    if success and merged_event and target_event_id:\n        \n        # status\":\"closes\" \"description\":\"Merged into case id: 333\" \"custom_fields\":{\"Impact\":\"None\",\"Classification\":\"Child Event\"}}:\n        current_description = \" -- \" + merged_event.get('description') if merged_event.get('description') else ''\n        \n        phantom.debug(f'Current desc: {current_description}')\n        \n        update_data = {\n            \"status\": \"closed\",\n            \"description\": f'Duplicate event. Merged into event/case id: {target_event_id}' + current_description,\n            \"custom_fields\": {\n                \"Impact\": \"None\",\n                \"Classification\": \"Child Event\"\n            }\n        }\n        \n        \n        success, message = phantom.update(merged_event, update_data)\n        \n        if success:\n            phantom.debug(f'Successfully closed case/event: {event_id}')\n        else:\n            phantom.error(f'Failed to close case/event: {event_id} Message Returned: {message}')\n            \n\n",
                    "x": 980,
                    "y": 1204.5
                },
                "8": {
                    "data": {
                        "advanced": {
                            "customName": "Set return results",
                            "customNameId": 0,
                            "join": [],
                            "notRequiredJoins": [
                                "get_email_events_or_cases",
                                "merge_into_duplicate"
                            ]
                        },
                        "functionId": 4,
                        "functionName": "set_return_results",
                        "id": "8",
                        "inputParameters": [],
                        "outputVariables": [
                            "event_merged"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    duplicate_event = phantom.get_run_data(key='duplicate_event')\n    \n    phantom.debug(f'Value of duplicate event: {duplicate_event} {type(duplicate_event)}')\n    \n    set_return_results__event_merged = duplicate_event == \"True\"\n    \n    phantom.debug(f'Set Return results: {set_return_results__event_merged} {type(set_return_results__event_merged)}')\n\n",
                    "x": 980,
                    "y": 1324.5
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.1.84890"
    },
    "create_time": "2022-09-07T20:50:14.078274+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}