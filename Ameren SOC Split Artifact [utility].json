{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_3_to_port_5",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_0_to_port_3",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_5_to_port_10",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_10_to_port_9",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                }
            ],
            "hash": "dc4e73229170eab07c696719bec54d55c44024b3",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 420
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 1160
                },
                "10": {
                    "data": {
                        "advanced": {
                            "customName": "delete all cef",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "delete_all_cef",
                        "id": "10",
                        "inputParameters": [
                            "cef_to_delete=destinationAddressList"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "10",
                    "type": "code",
                    "userCode": "\n    id_value  = container.get(\"id\", None)\n    base_url  = phantom.build_phantom_rest_url('container')\n    total_url = base_url + \"/{0}/artifacts\".format(str(id_value))\n    \n    key_del   = str(input_parameter_0).split(\"=\")[1].lstrip().rstrip()\n    jsn_mod   = []\n    \n    ################################\n    response  = phantom.requests.get(total_url, verify=False)\n    \n    if response.status_code == 200:\n            for item in response.json()['data']:\n                if key_del in item['cef']:\n                    del item['cef'][key_del]\n                    jsn_mod.append(item)                    \n    else:\n        phantom.error(response.text)\n    \n    ################################\n    \n    \n    base_url  = phantom.build_phantom_rest_url('artifact')\n    \n    for item in jsn_mod:\n        \n        art_id    = str(item['id'])\n        total_url = base_url + \"/{0}\".format(art_id)\n        response  = phantom.requests.post(total_url, json=item, verify=False)\n        \n        if response.status_code == 200:\n            phantom.debug(\"cef item deleted on artifact id={0}\".format(art_id))\n        else:\n            phantom.error(response.text)\n\n",
                    "x": 980,
                    "y": 860
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "filter none",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.destinationAddressList",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_none",
                        "id": "3",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "filter",
                    "x": 1040,
                    "y": 560
                },
                "5": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "csv_string_to_output",
                            "repoName": "local"
                        },
                        "functionId": 1,
                        "functionName": "csv_string_to_output_1",
                        "id": "5",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "csv_string_to_output": {
                                "description": "",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "*"
                                        ],
                                        "description": "",
                                        "inputType": "item",
                                        "label": "convert_list_input",
                                        "name": "convert_list_input",
                                        "placeholder": "",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "csv_string_to_output",
                                "name": "csv_string_to_output"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "csv_string_to_output": {
                                "convert_list_input": "filtered-data:filter_none:condition_1:artifact:*.cef.destinationAddressList"
                            }
                        }
                    },
                    "errors": {},
                    "id": "5",
                    "type": "utility",
                    "x": 980,
                    "y": 740
                },
                "9": {
                    "data": {
                        "advanced": {
                            "customName": "create_artifact",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "create_artifact",
                        "id": "9",
                        "inputParameters": [
                            "csv_string_to_output_1:custom_function_result.data.*.ouput_item",
                            "cef_name=destinationAddress"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "9",
                    "type": "code",
                    "userCode": "    \n    id_value  = container.get(\"id\", None)\n    base_url  = phantom.build_phantom_rest_url('artifact')\n    total_url = base_url\n    cef_key   = input_parameter_0.split(\"=\")[1].lstrip().rstrip()\n    \n    \n    #note https://docs.splunk.com/Documentation/SOARonprem/5.3.1/PlatformAPI/RESTArtifacts\n    #read the part on run_automation if you dont want this to trigger automation\n    \n    art_json = {\"container_id\":id_value,\n                \"name\":\"flatened_artifact\",\n                \"label\":\"even\",\n                \"severity\":\"Medium\",\n                \"cef\": {}\n               }\n    \n    for item in csv_string_to_output_1_data___ouput_item:\n        \n        art_json[\"cef\"] = {cef_key:item}\n        \n        response  = phantom.requests.post(total_url, json=art_json, verify=False)\n    \n        if response.status_code == 200:\n            phantom.debug(response.text)\n        else:\n            phantom.error(response.text)\n\n",
                    "x": 980,
                    "y": 1000
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.5",
        "version": "5.2.1.78411"
    },
    "create_time": "2022-08-25T04:16:35.182170+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}