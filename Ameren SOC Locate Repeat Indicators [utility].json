{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Utility",
    "coa": {
        "data": {
            "description": "This playbook should be run at the end of a main playbook.  It will look through indicators, and find indicators that have been seen in the past.  If an indicator has been seen 3 or more times, a HUD care will be created.",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_3",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_1",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "695e61dd8f867909dc7169d344adf1cc2765d2f9",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 419.9999999999999
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 1000
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "Gather all indicators",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "indicator_collect",
                            "repoName": "community"
                        },
                        "functionId": 1,
                        "functionName": "gather_all_indicators",
                        "id": "2",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "indicator_collect": {
                                "description": "Collect all indicators in a container and separate them by data type. Additional output data paths are created for each data type. Artifact scope is ignored.",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "The current container",
                                        "inputType": "item",
                                        "label": "container",
                                        "name": "container",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom artifact id"
                                        ],
                                        "description": "Optional parameter to only look for indicator values that occur in the artifacts with these IDs. Must be one of: json serializable list, comma separated integers, or a single integer.",
                                        "inputType": "list",
                                        "label": "artifact_ids_include",
                                        "name": "artifact_ids_include",
                                        "placeholder": "artifact:*.id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to only include indicators with at least one of the provided types in the output. If left empty, all indicator types will be included except those that are explicitly excluded. Accepts a comma-separated list.",
                                        "inputType": "list",
                                        "label": "indicator_types_include",
                                        "name": "indicator_types_include",
                                        "placeholder": "ip, domain",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to exclude indicators with any of the provided types from the output. Accepts a comma-separated list.",
                                        "inputType": "list",
                                        "label": "indicator_types_exclude",
                                        "name": "indicator_types_exclude",
                                        "placeholder": "ip, domain",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to only include indicators with at least one of the provided tags in the output. If left empty, tags will be ignored except when they are excluded. Accepts a comma-separated list.",
                                        "inputType": "list",
                                        "label": "indicator_tags_include",
                                        "name": "indicator_tags_include",
                                        "placeholder": "not_contained, malware",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to exclude indicators with any of the provided tags from the output. Accepts a comma-separated list.",
                                        "inputType": "list",
                                        "label": "indicator_tags_exclude",
                                        "name": "indicator_tags_exclude",
                                        "placeholder": "contained, not_malware",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "indicator_collect",
                                "name": "indicator_collect"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "indicator_collect": {
                                "artifact_ids_include": null,
                                "container": "container:id",
                                "indicator_tags_exclude": null,
                                "indicator_tags_include": null,
                                "indicator_types_exclude": null,
                                "indicator_types_include": "email,ip,domain,url,network"
                            }
                        }
                    },
                    "errors": {},
                    "id": "2",
                    "type": "utility",
                    "x": 980,
                    "y": 544.5
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "create hud cards for repeats",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "create_hud_cards_for_repeats",
                        "id": "3",
                        "inputParameters": [
                            "container:id",
                            "gather_all_indicators:custom_function_result.data.all_indicators.*.cef_value"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    \n    # https://splunksoar-apm.ameren.com/rest/ioc?value=www.wnd.com\n    import hashlib\n    import re\n    \n    # Local exclusion list.  If we end up with a lot of repeats,\n    # we can build this into a global list for excluding and ease of maintenance.\n    excluded_indicators = [\n        'ameren.com'\n    ]\n    \n    AMEREN_EMAIL_MATCH = re.compile('.*?@ameren.com', re.IGNORECASE)\n    \n    search_url = phantom.build_phantom_rest_url('ioc')\n    \n    # Dedup\n    indicator_values = list(set(gather_all_indicators_data_all_indicators___cef_value)) if gather_all_indicators_data_all_indicators___cef_value else []\n    \n    # Filter out excluded\n    indicator_values = list(indicator for indicator in indicator_values if not indicator.lower().strip() in excluded_indicators)\n    \n    # Filter out @ameren.com matches\n    indicator_values = list(indicator for indicator in indicator_values if not AMEREN_EMAIL_MATCH.match(indicator))\n    \n    # phantom.debug(f'After filter: {json.dumps(indicator_values, indent=4)}')\n    \n    # We want to get a list of all open containers, and exclude them from indicator matches.  We really only want to find matches in closed cases.\n    open_container_ids = []\n    container_url = phantom.build_phantom_rest_url('container')\n    params = {\n        \"_exclude_status\":'\"closed\"',\n        \"page_size\":0\n    }\n    \n    container_response = phantom.requests.get(f'{container_url}', verify=False, params=params)\n    \n    if container_response.status_code == 200:\n        open_containers = container_response.json()['data']\n        open_container_ids = list(container.get('id') for container in open_containers if container)\n        \n    else:\n        phantom.error(f'Failed to get list of open containers.  Resp Code: {container_response.status_code} url: {container_url}')\n        \n    repeat_indicators = {}\n    \n    phantom.debug(f'Open Container Ids for filters: {open_container_ids}')\n    \n    for value in indicator_values:\n        \n        params = {\n            \"value\": value\n        }\n        \n        #phantom.debug(f'making req: url: {search_url} params: {json.dumps(params, indent=4)}')\n        response = phantom.requests.get(search_url, verify=False, params=params)\n        \n        \n        if response.status_code == 200:\n            \n            containers = response.json()['data'] if response.json()['data'] else []\n            \n            # filter out any open containers\n            containers = list(container for container in containers if not container.get('container_id') in open_container_ids and container.get('container_id') != id_value)\n            \n            phantom.debug(f'Located containers with matching indicator that are not open: {json.dumps(containers, indent=4)}')\n            \n            if len(containers) >= 2: # 2 or more closed containers that contain the indicator in our current case.\n                \n                # this indicator has been seen in 3 containers, including ours.\n                repeat_indicators[value] = {\n                    'count': len(containers),\n                    'containers': containers\n                }\n                \n                \n            else:\n                phantom.error(f'Received invalid response making call to /ioc for Value: {value} Resp Code: {response.status_code}')\n                \n        phantom.error(f'Repeat Indicators Located: {json.dumps(repeat_indicators, indent=4)}')\n            \n        if len(repeat_indicators) > 0:\n            for indicator, value in repeat_indicators.items():\n                count = value.get('count')\n                phantom.debug(f'Create HUD Card for indicator: {indicator} count: {count}')\n                message = f'Indicator Seen in {count} prior containers'\n                \n                # Building a unique identifier for the hud card so it will never repeat.\n                indicator_md5 = hashlib.md5(indicator.encode()).hexdigest()\n                \n                \n                phantom.pin(container=id_value, message=message, data=indicator, pin_type='card', pin_style='red', truncate=True, name=f'repeat_indicator_{indicator_md5}', trace=False)\n                \n                \n\n",
                    "x": 980,
                    "y": 664.5
                }
            },
            "notes": "List of indicator exclusions are currently in the \"create hud cards for repeats\" block..."
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.1.84890"
    },
    "create_time": "2022-09-07T19:01:32.698308+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}