{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_3",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_3_to_port_4",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "4",
                    "targetPort": "4_in"
                }
            ],
            "hash": "326d02b16e0c6c34d2e7e762a2de2c451f6dcfa7",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 419.99999999999955
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 1000
                },
                "2": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "code_1",
                        "id": "2",
                        "inputParameters": [
                            "artifact:*.cef",
                            "artifact:*.cef.sourceAddress",
                            "artifact:*.cef.sourceHostName",
                            "artifact:*.cef.senders"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(f'cef:  {json.dumps(container_artifact_header_item_0, indent=4)}')\n    phantom.debug(f'sourceAddress:  {json.dumps(container_artifact_cef_item_1, indent=4)}')\n    phantom.debug(f'sourceHostName:  {json.dumps(container_artifact_cef_item_2, indent=4)}')\n    phantom.debug(f'senders:  {json.dumps(container_artifact_cef_item_3, indent=4)}')\n\n",
                    "x": 980,
                    "y": 564.5
                },
                "3": {
                    "data": {
                        "action": "ip reputation",
                        "actionType": "investigate",
                        "advanced": {
                            "join": []
                        },
                        "connector": "VirusTotal v3",
                        "connectorConfigs": [
                            "test_virustotal"
                        ],
                        "connectorId": "3fe4875d-a4a7-47d3-9ef1-f9e63a6653a4",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "ip_reputation_1",
                        "id": "3",
                        "parameters": {
                            "ip": "artifact:*.cef.sourceAddress"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "ip"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "action",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(f'parameters:  {json.dumps(parameters, indent=4)}')\n\n",
                    "x": 980,
                    "y": 700
                },
                "4": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "code_2",
                        "id": "4",
                        "inputParameters": [
                            "ip_reputation_1:action_result.summary"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "4",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(f'result data:  {json.dumps(ip_reputation_1_result_item_0, indent=4)}')\n\n",
                    "x": 980,
                    "y": 844.5
                },
                "5": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "code_3",
                        "id": "5",
                        "inputParameters": [
                            "artifact:*.cef.sourceAddress"
                        ],
                        "outputVariables": [
                            "cef"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    cef_orig = container_artifact_cef_item_0\n    cef_new = []\n    for art in cef_orig:\n        items = 0\n        for value in art.values():\n            if isinstance(value, list):\n                if value.len() > items:\n                    items = value.len()\n\n        phantom.debug(f'{items} items found')\n\n        for x in range(items):\n            art_new = {}\n            for key, value in art:\n                if isinstance(value, list):\n                    if x < value.len():\n                        art_new[key] = value[x]\n                else:\n                    art_new[key] = value\n                    \n            cef_new.append(art_new)\n\n                \n\n",
                    "x": 1340,
                    "y": 704.5
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.1.84890"
    },
    "create_time": "2023-06-07T02:19:57.666237+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}