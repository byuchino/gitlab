{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "Utility playbook to modify the tags for artifacts specified by ID.\nSupported operations are tag removal and tag addition.",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                }
            ],
            "hash": "fc1bc744fb8f71ff3554b9bcfd4bea122ce58b2d",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 1000,
                    "y": 419.9999999999999
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 1000,
                    "y": 720
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "Modify Artifact Tags",
                            "customNameId": 0,
                            "description": "Modifies the tags for passed artifact IDs.\nFirst parameter is the artifact id list\nSecond parameter is the operation to be performed, in the following form:\n<oper> = <tag>\nwhere:\n <oper> is either \"tag_to_remove\" or \"tag_to_add\", and\n<tag> is the tag either remove or add\nThe second parameter is also a list and so multiple operations may be specified",
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "modify_artifact_tags",
                        "id": "2",
                        "inputParameters": [
                            "playbook_input:artifact_id",
                            "playbook_input:artifact_op"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    for art_id in playbook_input_artifact_id_values:\n        phantom.debug(f'artifact id:  {art_id}')\n        total_url = phantom.build_phantom_rest_url('artifact', str(art_id))\n\n        response  = phantom.requests.get(total_url, verify=False)\n\n        if response.status_code == 200:\n            art_json = response.json()\n            tags     = art_json['tags']\n            phantom.debug(f'tags before:  {tags}')\n            for op_request in playbook_input_artifact_op_values:\n                art_oper = str(op_request).split(\"=\")[0].lstrip().rstrip()\n                art_tag  = str(op_request).split(\"=\")[1].lstrip().rstrip()\n                if \"remove\" in art_oper:\n                    if art_tag in tags:\n                        tags.remove(art_tag)\n                elif \"add\" in art_oper:\n                    if art_tag not in tags:\n                        tags.append(art_tag)\n            phantom.debug(f'tags after:  {tags}')\n        else:\n            phantom.error(response.text)\n\n        response  = phantom.requests.post(total_url, json=art_json, verify=False)\n\n",
                    "warnings": {},
                    "x": 980,
                    "y": 564.5
                }
            },
            "notes": ""
        },
        "input_spec": [
            {
                "contains": [],
                "description": "",
                "name": "artifact_id"
            },
            {
                "contains": [],
                "description": "tag_to_add=mytag or tag_to_remove=mytag, comma separate multiple ops",
                "name": "artifact_op"
            }
        ],
        "output_spec": null,
        "playbook_type": "data",
        "python_version": "3",
        "schema": "5.0.11",
        "version": "6.2.0.355"
    },
    "create_time": "2024-02-08T19:46:01.147068+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}