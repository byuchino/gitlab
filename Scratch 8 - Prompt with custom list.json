{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Utility",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_2_to_port_3",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_3_to_port_6",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_3_to_port_7",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "id": "port_0_to_port_10",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                },
                {
                    "id": "port_10_to_port_11",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "11",
                    "targetPort": "11_in"
                }
            ],
            "hash": "f36c3add1ae5ec59282db03aceb17808d4bd72b3",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 239.9999999999999
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 1000
                },
                "10": {
                    "data": {
                        "action": "get data",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "",
                            "customNameId": -1,
                            "join": []
                        },
                        "connector": "HTTP",
                        "connectorConfigs": [
                            "local rest"
                        ],
                        "connectorId": "290b7499-0374-4930-9cdc-5e9b05d65827",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_data_1",
                        "id": "10",
                        "parameters": {
                            "headers": {
                                "functionId": 1,
                                "parameters": [
                                    "artifact:*.cef.app"
                                ],
                                "template": "\n"
                            },
                            "location": {
                                "functionId": 1,
                                "parameters": [
                                    "artifact:*.cef.app"
                                ],
                                "template": "/rest/container\n"
                            },
                            "verify_certificate": false
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "location"
                            },
                            {
                                "data_type": "boolean",
                                "field": "verify_certificate"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "10",
                    "type": "action",
                    "x": 980,
                    "y": 344.5
                },
                "11": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 4,
                        "functionName": "code_4",
                        "id": "11",
                        "inputParameters": [
                            "get_data_1:action_result.data.*.parsed_response_body"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "11",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(f'containers: {json.dumps(get_data_1_result_item_0[0], indent=4)}')\n    \n    picklist = []\n    containers = get_data_1_result_item_0[0].get('data')\n    for container in containers:\n        phantom.debug(f'Container: {container.get(\"id\")} Status: {container.get(\"status\")}')\n        cstate = container.get(\"status\")\n        if cstate == \"new\" or cstate == \"open\":\n            picklist.append(str(container.get(\"id\")))\n            \n    phantom.debug(f'picklist: {picklist}')\n    \n    response_types = [\n        {\n            \"prompt\": \"Target Case/Event ID\",\n            \"options\": {\n                \"type\": \"list\",\n                \"choices\": picklist,\n            },\n        }\n    ]\n\n    phantom.debug(f'response_types: {json.dumps(response_types, indent=4)}')\n\n",
                    "x": 1240,
                    "y": 460
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "Prompt user for case event id",
                            "customNameId": 0,
                            "join": []
                        },
                        "approver": "admin",
                        "functionId": 1,
                        "functionName": "prompt_user_for_case_event_id",
                        "id": "2",
                        "message": "Please provide that target case/event ID that the selected events/cases will be merged into.\n",
                        "parameters": [
                            "artifact:*.cef.app"
                        ],
                        "responseTime": 30,
                        "responses": [
                            {
                                "responseOptions": [
                                    "",
                                    ""
                                ],
                                "responsePrompt": "Target Case/Event ID",
                                "responseType": "customList"
                            }
                        ],
                        "type": "prompt"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "prompt",
                    "x": 1060,
                    "y": 520
                },
                "3": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "prompt_user_for_case_event_id:action_result.summary.responses.0",
                                        "value": ""
                                    },
                                    {
                                        "op": "!=",
                                        "param": "prompt_user_for_case_event_id:action_result.summary.responses.0",
                                        "value": "container:id"
                                    }
                                ],
                                "conditionIndex": 0,
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "3",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "decision",
                    "x": 1060,
                    "y": 660
                },
                "6": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "code_1",
                        "id": "6",
                        "inputParameters": [],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(f'Else clause taken')\n\n",
                    "x": 1320,
                    "y": 840
                },
                "7": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "code_2",
                        "id": "7",
                        "inputParameters": [],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(f'If clause taken')\n\n",
                    "x": 980,
                    "y": 840
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.1.84890"
    },
    "create_time": "2022-08-16T01:15:24.719326+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}