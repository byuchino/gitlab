{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "This playbook triggers the execution of a remediation playbook(s) upon completion of all attack analyzer jobs.\nEnsure all outstanding attack analyzer jobs are complete, then check for the presence of a remediation artifact in the container.  If present (and there is only one), update the container label to the remediation_label value in the artifact.  This will trigger any playbook(s) with that label.",
            "edges": [
                {
                    "id": "port_5_to_port_1",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_3_to_port_6",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "6",
                    "targetPort": "6_in"
                },
                {
                    "id": "port_6_to_port_7",
                    "sourceNode": "6",
                    "sourcePort": "6_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_7_to_port_8",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "8",
                    "targetPort": "8_in"
                },
                {
                    "id": "port_8_to_port_9",
                    "sourceNode": "8",
                    "sourcePort": "8_out",
                    "targetNode": "9",
                    "targetPort": "9_in"
                },
                {
                    "id": "port_9_to_port_1",
                    "sourceNode": "9",
                    "sourcePort": "9_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                },
                {
                    "id": "port_11_to_port_12",
                    "sourceNode": "11",
                    "sourcePort": "11_out",
                    "targetNode": "12",
                    "targetPort": "12_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_7_to_port_5",
                    "sourceNode": "7",
                    "sourcePort": "7_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "id": "port_0_to_port_3",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                }
            ],
            "hash": "c7bd57a3267b3bd3d93ef2a0afeda78647680639",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 1000,
                    "y": 340
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 1000,
                    "y": 1260
                },
                "11": {
                    "customCode": null,
                    "data": {
                        "advanced": {
                            "customName": "Count Pending Jobs",
                            "customNameId": 0,
                            "description": "Use REST api to find all artifacts tagged with the block input string.  Return count of artifacts found.",
                            "join": [],
                            "scope": "all"
                        },
                        "functionId": 2,
                        "functionName": "count_pending_jobs",
                        "id": "11",
                        "inputParameters": [
                            "saa_pending"
                        ],
                        "outputVariables": [
                            "num_tags"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "11",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    check_tag = input_parameter_0\n    \n    id_value  = container.get(\"id\", None)\n    base_url  = phantom.build_phantom_rest_url('container')\n    total_url = base_url + '/{0}/artifacts?_filter_tags__contains=\"{1}\"'.format(str(id_value),check_tag)\n    count     = 0\n    \n    response  = phantom.requests.get(total_url, verify=False)\n    phantom.debug(f'response:  {json.dumps(response.json(), indent=4)}')\n    \n    if response.status_code == 200:\n        count = response.json()['count']\n    else:\n        phantom.error(response.text)\n    \n    phantom.debug(f'There are {count} artifacts tagged {check_tag}')\n    count_pending_jobs__num_tags = count\n    \n",
                    "warnings": {
                        "context": [
                            "Connect block to playbook flow."
                        ]
                    },
                    "x": 1320,
                    "y": 180
                },
                "12": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "count_pending_jobs:custom_function:num_tags",
                                        "value": "0"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "No pending jobs",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "pending jobs remain",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 2,
                        "functionName": "decision_2",
                        "id": "12",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "12",
                    "type": "decision",
                    "warnings": {},
                    "x": 1400,
                    "y": 300
                },
                "3": {
                    "data": {
                        "advanced": {
                            "customName": "filter for remediation artifact",
                            "customNameId": 0,
                            "join": [],
                            "scope": "all"
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "in",
                                        "param": "saa_remediation",
                                        "value": "artifact:*.tags"
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "artifact:*.cef.remediation_label",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "remediation artifact present",
                                "logic": "and"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "filter_for_remediation_artifact",
                        "id": "3",
                        "type": "filter"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "filter",
                    "warnings": {},
                    "x": 1040,
                    "y": 480
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "Update Container Label from Remediation Artifact",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "container_update",
                            "repoName": "community"
                        },
                        "functionId": 3,
                        "functionName": "update_container_label_from_remediation_artifact",
                        "id": "5",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "container_update": {
                                "description": "Allows updating various attributes of a container in a single custom function. Any attributes of a container not listed can be updated via the input_json parameter. ",
                                "fields": [
                                    {
                                        "dataTypes": [
                                            "phantom container id"
                                        ],
                                        "description": "Supports a container id or container dictionary",
                                        "inputType": "item",
                                        "label": "container_input",
                                        "name": "container_input",
                                        "placeholder": "container:id",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change container name",
                                        "inputType": "item",
                                        "label": "name",
                                        "name": "name",
                                        "placeholder": "My Container Name",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change the container description",
                                        "inputType": "item",
                                        "label": "description",
                                        "name": "description",
                                        "placeholder": "My Container Description",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [
                                            "phantom container label"
                                        ],
                                        "description": "Optional parameter to change the container label",
                                        "inputType": "item",
                                        "label": "label",
                                        "name": "label",
                                        "placeholder": "my_label",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change the container owner. Accepts a username or role name or keyword \"current\" to set the currently running playbook user as the owner.",
                                        "inputType": "item",
                                        "label": "owner",
                                        "name": "owner",
                                        "placeholder": "admin",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change the container sensitivity. ",
                                        "inputType": "item",
                                        "label": "sensitivity",
                                        "name": "sensitivity",
                                        "placeholder": "amber",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change the container severity.",
                                        "inputType": "item",
                                        "label": "severity",
                                        "name": "severity",
                                        "placeholder": "medium",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change the container status.",
                                        "inputType": "item",
                                        "label": "status",
                                        "name": "status",
                                        "placeholder": "open",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to change the container tags. Must be in the format of a comma separated list.",
                                        "inputType": "item",
                                        "label": "tags",
                                        "name": "tags",
                                        "placeholder": "tag1, tag2",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "dataTypes": [],
                                        "description": "Optional parameter to modify any extra attributes of a container. Input_json will be merged with other inputs. In the event of a conflict, input_json will take precedence.",
                                        "inputType": "item",
                                        "label": "input_json",
                                        "name": "input_json",
                                        "placeholder": "{\"custom_fields\": {\"field_name\": \"field_value\"}}",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "container_update",
                                "name": "container_update"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "container_update": {
                                "container_input": "container:id",
                                "description": null,
                                "input_json": null,
                                "label": "filtered-data:filter_for_remediation_artifact:condition_1:artifact:*.cef.remediation_label",
                                "name": null,
                                "owner": null,
                                "sensitivity": null,
                                "severity": null,
                                "status": null,
                                "tags": null
                            }
                        }
                    },
                    "errors": {},
                    "id": "5",
                    "type": "utility",
                    "warnings": {
                        "config": [
                            "Reconfigure invalid datapath."
                        ]
                    },
                    "x": 720,
                    "y": 980
                },
                "6": {
                    "data": {
                        "advanced": {
                            "customName": "Count Artifacts",
                            "customNameId": 0,
                            "description": "Count the number of remediation artifacts - there should only be 1",
                            "join": [],
                            "scope": "all"
                        },
                        "functionId": 1,
                        "functionName": "count_artifacts",
                        "id": "6",
                        "inputParameters": [
                            "filtered-data:filter_for_remediation_artifact:condition_1:artifact:*.cef.remediation_label"
                        ],
                        "outputVariables": [
                            "num_items"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "6",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    count_artifacts__num_items = len(filtered_artifact_0__cef_remediation_label)\n    phantom.debug(f'list length:  {count_artifacts__num_items}')\n\n",
                    "warnings": {
                        "config": [
                            "Reconfigure invalid datapath."
                        ]
                    },
                    "x": 980,
                    "y": 660
                },
                "7": {
                    "data": {
                        "advanced": {
                            "customName": "Number of Artifacts",
                            "customNameId": 0,
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "==",
                                        "param": "count_artifacts:custom_function:num_items",
                                        "value": "1"
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "one artifact present",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "not one artifact present",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "number_of_artifacts",
                        "id": "7",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "decision",
                    "warnings": {},
                    "x": 1060,
                    "y": 820
                },
                "8": {
                    "data": {
                        "advanced": {
                            "customName": "Format Error Note",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "format_error_note",
                        "id": "8",
                        "parameters": [
                            "count_artifacts:custom_function:num_items"
                        ],
                        "template": "Error updating label for remediation handler - {0} remediation artifacts were found.  There must be exactly one.\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "8",
                    "type": "format",
                    "warnings": {},
                    "x": 1260,
                    "y": 980
                },
                "9": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 4,
                        "functionName": "add_note_4",
                        "id": "9",
                        "loop": {
                            "enabled": false,
                            "exitAfterUnit": "m",
                            "exitAfterValue": 10,
                            "exitConditionEnabled": false,
                            "exitLoopAfter": 2,
                            "pauseUnit": "m",
                            "pauseValue": 2
                        },
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "add_note": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "title",
                                        "name": "title",
                                        "placeholder": "Enter a note title",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "description": "",
                                        "label": "content",
                                        "name": "content",
                                        "placeholder": "Enter the note content",
                                        "renderType": "datapath",
                                        "required": false
                                    },
                                    {
                                        "choices": [
                                            "markdown",
                                            "html"
                                        ],
                                        "default": "markdown",
                                        "description": "",
                                        "label": "note format",
                                        "name": "note_format",
                                        "placeholder": "Enter the note content",
                                        "renderType": "dropdown",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "default": "general",
                                        "hidden": true,
                                        "name": "note_type",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "event_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "task_id",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add note",
                                "name": "add_note"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "add_note": {
                                "_internal": [
                                    "container",
                                    "note_type",
                                    "author",
                                    "event_id",
                                    "task_id",
                                    "trace"
                                ],
                                "content": "format_error_note:formatted_data",
                                "note_format": "markdown",
                                "note_type": "general",
                                "title": "Remediation Update Error"
                            }
                        }
                    },
                    "errors": {},
                    "id": "9",
                    "type": "utility",
                    "warnings": {},
                    "x": 1260,
                    "y": 1100
                }
            },
            "notes": ""
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.11",
        "version": "6.2.0.355"
    },
    "create_time": "2024-02-13T18:40:02.702083+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}