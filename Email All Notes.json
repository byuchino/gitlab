{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "Retrieves all notes from container using REST, then builds and sends an email body with the notes as the content.",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_3",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "3",
                    "targetPort": "3_in"
                },
                {
                    "id": "port_10_to_port_20",
                    "sourceNode": "10",
                    "sourcePort": "10_out",
                    "targetNode": "20",
                    "targetPort": "20_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_20_to_port_7",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "7",
                    "targetPort": "7_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_20_to_port_28",
                    "sourceNode": "20",
                    "sourcePort": "20_out",
                    "targetNode": "28",
                    "targetPort": "28_in"
                },
                {
                    "id": "port_3_to_port_30",
                    "sourceNode": "3",
                    "sourcePort": "3_out",
                    "targetNode": "30",
                    "targetPort": "30_in"
                },
                {
                    "conditions": [
                        {
                            "index": 0
                        }
                    ],
                    "id": "port_30_to_port_5",
                    "sourceNode": "30",
                    "sourcePort": "30_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                },
                {
                    "conditions": [
                        {
                            "index": 1
                        }
                    ],
                    "id": "port_30_to_port_33",
                    "sourceNode": "30",
                    "sourcePort": "30_out",
                    "targetNode": "33",
                    "targetPort": "33_in"
                },
                {
                    "id": "port_33_to_port_36",
                    "sourceNode": "33",
                    "sourcePort": "33_out",
                    "targetNode": "36",
                    "targetPort": "36_in"
                },
                {
                    "id": "port_5_to_port_36",
                    "sourceNode": "5",
                    "sourcePort": "5_out",
                    "targetNode": "36",
                    "targetPort": "36_in"
                },
                {
                    "id": "port_36_to_port_10",
                    "sourceNode": "36",
                    "sourcePort": "36_out",
                    "targetNode": "10",
                    "targetPort": "10_in"
                }
            ],
            "hash": "10035f2e548d5bfa3c8183d02fabea740f0832a4",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "x": 1000,
                    "y": 299.99999999999943
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "userCode": "\n    # This function is called after all actions are completed.\n    # summary of all the action and/or all details of actions\n    # can be collected here.\n\n    # summary_json = phantom.get_summary()\n    # if 'result' in summary_json:\n        # for action_result in summary_json['result']:\n            # if 'action_run_id' in action_result:\n                # action_results = phantom.get_action_results(action_run_id=action_result['action_run_id'], result_data=False, flatten=False)\n                # phantom.debug(action_results)\n\n",
                    "x": 1000,
                    "y": 1400
                },
                "10": {
                    "data": {
                        "advanced": {
                            "customName": "Get Email Recipients",
                            "customNameId": 0,
                            "join": []
                        },
                        "customFunction": {
                            "draftMode": false,
                            "name": "custom_list_enumerate",
                            "repoName": "community"
                        },
                        "functionId": 3,
                        "functionName": "get_email_recipients",
                        "id": "10",
                        "selectMore": false,
                        "type": "utility",
                        "utilities": {
                            "custom_list_enumerate": {
                                "description": "Fetch a custom list and iterate through the rows, producing a dictionary output for each row with the row number and the value for each column.",
                                "fields": [
                                    {
                                        "dataTypes": [],
                                        "description": "the name or ID of a custom list",
                                        "inputType": "item",
                                        "label": "custom_list",
                                        "name": "custom_list",
                                        "placeholder": "my_custom_list",
                                        "renderType": "datapath",
                                        "required": false
                                    }
                                ],
                                "label": "custom_list_enumerate",
                                "name": "custom_list_enumerate"
                            }
                        },
                        "utilityType": "custom_function",
                        "values": {
                            "custom_list_enumerate": {
                                "custom_list": "bulk ioc recipient"
                            }
                        }
                    },
                    "errors": {},
                    "id": "10",
                    "type": "utility",
                    "x": 980,
                    "y": 1000
                },
                "2": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "format_1",
                        "id": "2",
                        "parameters": [
                            "container:id"
                        ],
                        "template": "/container_note?_filter_container_id={0}\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "format",
                    "x": 980,
                    "y": 400
                },
                "20": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "get_email_recipients:custom_function_result.data.*.column_0",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "Recipients Present",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "No Recipients",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 1,
                        "functionName": "decision_1",
                        "id": "20",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "20",
                    "type": "decision",
                    "x": 1060,
                    "y": 1100
                },
                "26": {
                    "data": {
                        "advanced": {
                            "customName": "Build Container Link",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 9,
                        "functionName": "build_container_link",
                        "id": "26",
                        "inputParameters": [],
                        "outputVariables": [
                            "link"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "26",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    id_value  = container.get(\"id\", None)\n    base_url  = phantom.build_phantom_rest_url('container')\n    total_url = base_url + \"/{0}\".format(str(id_value))\n    phantom.debug(f'container url:  {json.dumps(total_url, indent=4)}')\n    code_9__link = total_url\n\n",
                    "x": 1700,
                    "y": 640
                },
                "28": {
                    "data": {
                        "advanced": {
                            "customName": "Recipients List Empty Comment",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 6,
                        "functionName": "recipients_list_empty_comment",
                        "id": "28",
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "comment": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "comment",
                                        "name": "comment",
                                        "placeholder": "Enter a comment",
                                        "renderType": "datapath",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add comment",
                                "name": "comment"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "comment": {
                                "_internal": [
                                    "container",
                                    "author",
                                    "trace"
                                ],
                                "comment": "The recipients list is empty - check the custom list"
                            }
                        }
                    },
                    "errors": {},
                    "id": "28",
                    "type": "utility",
                    "x": 1200,
                    "y": 1280
                },
                "29": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "code_1",
                        "id": "29",
                        "inputParameters": [
                            "container:url"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "29",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(f'container url:  {json.dumps(url_value, indent=4)}')\n\n",
                    "x": 1700,
                    "y": 740
                },
                "3": {
                    "data": {
                        "action": "get data",
                        "actionType": "investigate",
                        "advanced": {
                            "customName": "Get Container Notes",
                            "customNameId": 0,
                            "join": []
                        },
                        "connector": "HTTP",
                        "connectorConfigs": [
                            "local rest"
                        ],
                        "connectorId": "290b7499-0374-4930-9cdc-5e9b05d65827",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "get_container_notes",
                        "id": "3",
                        "parameters": {
                            "location": "format_1:formatted_data",
                            "verify_certificate": false
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "location"
                            },
                            {
                                "data_type": "boolean",
                                "field": "verify_certificate"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "3",
                    "type": "action",
                    "x": 980,
                    "y": 500
                },
                "30": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "conditions": [
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "get_container_notes:action_result.data.*.response_body.data.*.title",
                                        "value": ""
                                    },
                                    {
                                        "conditionIndex": 0,
                                        "op": "!=",
                                        "param": "get_container_notes:action_result.data.*.response_body.data.*.content",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 0,
                                "customName": "Notes Present",
                                "display": "If",
                                "logic": "and",
                                "type": "if"
                            },
                            {
                                "comparisons": [
                                    {
                                        "conditionIndex": 1,
                                        "op": "==",
                                        "param": "",
                                        "value": ""
                                    }
                                ],
                                "conditionIndex": 1,
                                "customName": "No Notes Present",
                                "display": "Else",
                                "logic": "and",
                                "type": "else"
                            }
                        ],
                        "functionId": 3,
                        "functionName": "decision_3",
                        "id": "30",
                        "type": "decision"
                    },
                    "errors": {},
                    "id": "30",
                    "type": "decision",
                    "x": 1060,
                    "y": 620
                },
                "33": {
                    "data": {
                        "advanced": {
                            "customName": "Format Email No Content",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 4,
                        "functionName": "format_email_no_content",
                        "id": "33",
                        "parameters": [
                            "container:url",
                            "container:id"
                        ],
                        "template": "Link to Container: {0}\n\nThere are no notes present in container {1}\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "33",
                    "type": "format",
                    "x": 1200,
                    "y": 780
                },
                "36": {
                    "data": {
                        "advanced": {
                            "customName": "Route Formatted Body",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 3,
                        "functionName": "route_formatted_body",
                        "id": "36",
                        "inputParameters": [
                            "format_email_body:formatted_data",
                            "format_email_no_content:formatted_data"
                        ],
                        "outputVariables": [
                            "body"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "36",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(f'Notes present: {json.dumps(format_email_body, indent=4)}')\n    phantom.debug(f'No notes: {json.dumps(format_email_no_content, indent=4)}')\n    \n    route_formatted_body__body = format_email_body if format_email_body else format_email_no_content\n\n",
                    "x": 980,
                    "y": 900
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "Format Email Body",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "format_email_body",
                        "id": "5",
                        "parameters": [
                            "get_container_notes:action_result.data.*.response_body.data.*.title",
                            "get_container_notes:action_result.data.*.response_body.data.*.content",
                            "container:url"
                        ],
                        "template": "Link to Container: {2}\n\n%%\n{0}\n{1}\n=====================================\n%%\n",
                        "type": "format"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "format",
                    "x": 780,
                    "y": 780
                },
                "7": {
                    "data": {
                        "action": "send email",
                        "actionType": "generic",
                        "advanced": {
                            "join": []
                        },
                        "connector": "SMTP",
                        "connectorConfigs": [
                            "wpoven"
                        ],
                        "connectorId": "45bb6f37-4478-499b-b4a3-51ecfa62b78c",
                        "connectorVersion": "v1",
                        "functionId": 1,
                        "functionName": "send_email_1",
                        "id": "7",
                        "parameters": {
                            "body": "route_formatted_body:custom_function:body",
                            "from": "",
                            "subject": {
                                "functionId": 1,
                                "parameters": [
                                    "container:id"
                                ],
                                "template": "ioc report - container id {0}\n"
                            },
                            "to": "get_email_recipients:custom_function_result.data.*.column_0"
                        },
                        "requiredParameters": [
                            {
                                "data_type": "string",
                                "field": "to"
                            },
                            {
                                "data_type": "string",
                                "field": "body"
                            }
                        ],
                        "type": "action"
                    },
                    "errors": {},
                    "id": "7",
                    "type": "action",
                    "x": 780,
                    "y": 1280
                }
            },
            "notes": "Recipients are retrieved from a custom list."
        },
        "input_spec": null,
        "output_spec": null,
        "playbook_type": "automation",
        "python_version": "3",
        "schema": "5.0.6",
        "version": "5.3.1.84890"
    },
    "create_time": "2022-12-18T20:20:30.284485+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}